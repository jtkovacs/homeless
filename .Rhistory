?confint
confint(parm = )
knitr::opts_chunk$set(echo = TRUE)
study.p <- 0.45
study.se <- 0.012
error.margin <- qnorm(.975)*study.se
study.CI <- study.p + c(-study.error.margin, study.error.margin)
study.error.margin <- qnorm(.975)*study.se
study.CI <- study.p + c(-study.error.margin, study.error.margin)
study.CI
print(study.CI.95)
study.CI.95 <- study.p + c(-study.error.margin, study.error.margin)
print(study.CI.95)
prop.test(45,100)
?t.test
z.statistic <- (136-130)/17
t.test(mu=130, alternative="two.sided", conf.level=0.95, )
z.statistic
pnorm(z.statistic)
?sqrt
z.statistic <- (136-130)/(17/sqrt(35)
pnorm(z.statistic)
z.statistic <- (136-130)/(17/sqrt(35))
z.statistic
pnorm(z.statistic)
1-pnorm(z.statistic)
?pnorm
dnorm(z.statistic)
p.value <- 1-pnorm(z.statistic)
print(p.value)
0.03/2
head(height)
library(UsingR)
height <- get("father.son")
head(height)
plot (height$fheight ~ height$sheight)
plot (height$sheight ~ height$fheight)
cor(height)
plot (height$sheight ~ height$fheight)
cor(height)
lm(sheight ~ fheight, data=height)
summary(lm(sheight ~ fheight, data=height))
mod1 <- lm(sheight ~ fheight, data=height)
summary(mod1)
plot(sheight ~ fheight, data=height)
abline(mod1)
mod1 <- lm(sheight ~ fheight, data=height)
print(mod1)
mod1
mod1 <- lm(sheight ~ fheight, data=height)
mod1
mod1[0]
mod1$coefficients
?confint()
confint(mod1, level=0.05)
plot(sheight ~ fheight, data=height)
abline(mod1)
plot(sheight ~ fheight, data=height)
abline(mod1)
{plot(sheight ~ fheight, data=height)
abline(mod1)}
abline(mod1)}
{plot(sheight ~ fheight, data=height)
abline(mod1)}
names(mod1)
plot(mod1$residuals ~ mod1$fitted.values)
predict(mod1, c(50, 55, 70, 75, 90))
?predict()
predict(mod1, 50)
predict(mod1, newdata=dataframe(50, 55, 70, 75, 90))
predict(mod1, newdata=data.frame(50, 55, 70, 75, 90))
predict(mod1, newdata=data.frame(c(50, 55, 70, 75, 90)))
predict(mod1, newdata=data.frame(fheight=c(50, 55, 70, 75, 90)))
summary(mod1)
library(openintro)
install.packages("openintro", lib="/usr/local/anaconda3/lib/R/library/")
library(openintro)
data(gifted)
mod2 <- lm(score ~ fatheriq, data=gifted)
mod3 <- lm(score ~ motheriq, data=gifted)
mod2$coefficients
mod3$coefficients
mod3 <- lm(score ~ motheriq, data=gifted)
mod3$coefficients
mod2 <- lm(score ~ fatheriq, data=gifted)
mod3 <- lm(score ~ motheriq, data=gifted)
mod2.CI <- confint(mod2, level=0.95)
mod3.CI <- confint(mod3, level=0.95)
print(mod2.CI)
print(mod3.CI)
print(mod2.CI)
print(mod2$coefficients)
print(mod2.CI)
print(mod2$coefficients)
print(mod2$coefficients)
mod3$coefficients
mod3.CI <- confint(mod3, level=0.95)
print(mod3.CI)
summary(mod2)
summary(mod3)
plot(score ~ motheriq, data=gifted)
plot(score ~ fatheriq, data=gifted)
1.96/sqrt(15)
s.e <- 1.96/sqrt(15)
2.5+s.e
2.5 - s.e
2.5-3
-0.5/s.e
1/sqrt(15)
s.e <- 1/sqrt(15)
s.e
(2.5-3)/s.e
pnorm(-1.94, lower.tail=T)
exit
q()
knitr::opts_chunk$set(echo = TRUE)
for(i in 1:100){
# sample testing data, k=1000
out <- sample(1:nrow(data), 1000, replace = F)
# run model on training data
mod <- glm(income.g50 ~ education + age + sex + race,
data=data[-out,!colnames(data)%in%"income"], family="binomial")
# predict what was held out
preds <- predict(mod, newdata = data[out,], type = "response")
# calculate ROC & AUC
rr <- roc(preds, factor(data[out,]$income.g50))
print(rr)
auc.out <- auc(rr)
# calculate optimal cutoff
cutoff <- get.cutoff(preds, data[out,]$income.g50)
# calculate percent error
tab <- table(preds>cutoff, data[out,]$income.g50)
if(nrow(tab)!=2) next()
perc.error <- (tab[2,1]+tab[1,2])/sum(tab)
# store results
validation.matrix[i,] <- c(cutoff, auc.out, perc.error)
cat(".")
}
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("census data.csv")
# add column for income converted to dichotomous variable
data$income.g50 <- rep(0, nrow(data))
data$income.g50[data$income==" >50K"] <- 1
mod <- glm(income.g50 ~ education + age + sex + race,
data=data[,!colnames(data)%in%"income"], family="binomial")
summary(mod)
masters.OR <- round(exp(mod$coefficients[13]), 3)
names(masters.OR) <- "Masters"
firstfourth.OR <- round(exp(mod$coefficients[4]), 3)
names(firstfourth.OR) <- "1st-4th"
age.OR <- round(exp(mod$coefficients[17]), 3)
male.OR <- round(exp(mod$coefficients[18]), 3)
print(c("Odds ratios: ", masters.OR, firstfourth.OR, age.OR, male.OR), quote=F)
x <- data$age
{plot(x, data$income.g50, col="blue")
fits <- fitted(mod)
points(x, fits, pch=19, cex=0.3)}
tab <- table(data$income.g50, fits>=0.25)
cutoff.25 <- (tab[1,2]+tab[2,1])/sum(tab)
names(cutoff.25) <- "0.25 threshold"
tab <- table(data$income.g50, fits>=0.5)
cutoff.5 <- (tab[1,2]+tab[2,1])/sum(tab)
names(cutoff.5) <- "0.5 threshold"
tab <- table(data$income.g50, fits>=0.75)
cutoff.75 <- (tab[1,2]+tab[2,1])/sum(tab)
names(cutoff.75) <- "0.75 threshold"
print(c("Error: ", cutoff.25, cutoff.5, cutoff.75), quote=F)
library(AUC)
y <- factor(data$income.g50)
rr <- roc(fits, y)
plot(rr)
library(AUC)
y <- factor(data$income.g50)
rr <- roc(fits, y)
plot(rr)
auc(rr)
mod <- glm(income.g50 ~ ., data=data[,!colnames(data)%in%c("income")], family="binomial")
summary(mod)
masters.OR <- round(exp(mod$coefficients[23]), 3)
names(masters.OR) <- "Masters"
firstfourth.OR <- round(exp(mod$coefficients[14]), 3)
names(firstfourth.OR) <- "1st-4th"
print(c("Odds ratios: ", masters.OR, firstfourth.OR), quote=FALSE)
x <- data$age
{plot(x, data$income.g50, col="blue")
fits <- fitted(mod)
points(x, fits, pch=19, cex=0.3)}
tab <- table(data$income.g50, fits>=0.25)
cutoff.25 <- (tab[1,2]+tab[2,1])/sum(tab)
names(cutoff.25) <- "0.25 threshold"
tab <- table(data$income.g50, fits>=0.5)
cutoff.5 <- (tab[1,2]+tab[2,1])/sum(tab)
names(cutoff.5) <- "0.5 threshold"
tab <- table(data$income.g50, fits>=0.75)
cutoff.75 <- (tab[1,2]+tab[2,1])/sum(tab)
names(cutoff.75) <- "0.75 threshold"
print(c("Error: ", cutoff.25, cutoff.5, cutoff.75), quote=F)
y <- factor(data$income.g50)
rr <- roc(fits, y)
plot(rr)
auc(rr)
# initialize psuedorandom number generator used in sample()
set.seed(1345876)
# create matrix to hold results
validation.matrix <- matrix(NA, nrow = reps, ncol=3)
validation.matrix <- matrix(NA, nrow = 1000, ncol=3)
colnames(validation.matrix) <-c("cutoff", "auc.out", "perc.error")
get.cutoff <- function(fits, labs){
youden <- sensitivity(fits, labs)$measure + specificity(fits, labs)$measure-1
roc.ix <- which.max(youden)
sens <- sensitivity(fits, labs)
sens$cutoffs[roc.ix]
}
y <- factor(data$income.g50)
plot(rr)
install.packages("spatstat")
which R
whichR
q()
R.Version()
exp(-.228)
q()
q()
setwd('~/Documents/Homeless Deaths Analysis/')
library(spatstat) # spatial analysis of points data; R 3.2.3
shelters <- read.csv('data/resources_shelters_cleaned_geocoded.csv')
evictions <- read.csv('data/evictions_cleaned_geocoded.csv', sep='\t')
deaths <- read.csv('data/deaths_cleaned_geocoded.csv', sep='\t')
proximities <- read.csv('data/proximity_counts.csv', sep='\t')
#
min.long <- min(evictions$Long)
max.long <- max(evictions$Long)
min.lat <- min(evictions$Lat)
max.lat <- max(evictions$Lat)
# In general: ppp(x.coordinates, y.coordinates, x.range, y.range)
shelters.ppp <- ppp(shelters$Long, shelters$Lat, c(min.long, max.long), c(min.lat, max.lat))
evictions.ppp <- ppp(evictions$Long, evictions$Lat, c(min.long, max.long), c(min.lat, max.lat))
deaths.ppp <- ppp(deaths$Long, deaths$Lat, c(min.long, max.long), c(min.lat, max.lat))
plot(as.ppp(shelters.ppp))
plot(evictions.ppp)
plot(as.ppp(deaths.ppp))
# Density (heat map)
plot(density(deaths.ppp, adjust=1))
plot(density(evictions.ppp, adjust=1))
plot(density(shelters.ppp, adjust=1))
plot(density(deaths.ppp, adjust=.5))
plot(density(deaths.ppp, adjust=.25))
plot(density(deaths.ppp, adjust=.5))
plot(density(deaths.ppp, adjust=.25))
plot(density(deaths.ppp, adjust=.1))
plot(density(deaths.ppp, adjust=.5))
plot(density(deaths.ppp, adjust=.25))
plot(density(deaths.ppp, adjust=.1))
plot(density(deaths.ppp, adjust=.25))
plot(density(evictions.ppp, adjust=.25))
plot(density(shelters.ppp, adjust=.25))
